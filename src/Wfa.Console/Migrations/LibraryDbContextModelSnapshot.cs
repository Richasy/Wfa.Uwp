// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Wfa.Console;

namespace Wfa.Console.Migrations
{
    [DbContext(typeof(LibraryDbContext))]
    partial class LibraryDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.26");

            modelBuilder.Entity("Wfa.Models.Community.ArchGun", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Accuracy")
                        .HasColumnType("REAL");

                    b.Property<double?>("Ammo")
                        .HasColumnType("REAL");

                    b.Property<string>("Category")
                        .HasColumnType("TEXT");

                    b.Property<double>("CriticalChance")
                        .HasColumnType("REAL");

                    b.Property<double>("CriticalMultiplier")
                        .HasColumnType("REAL");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Disposition")
                        .HasColumnType("INTEGER");

                    b.Property<double>("FireRate")
                        .HasColumnType("REAL");

                    b.Property<string>("ImageName")
                        .HasColumnType("TEXT");

                    b.Property<int>("MagazineSize")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MasteryReq")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Multishot")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Noise")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("OmegaAttenuation")
                        .HasColumnType("REAL");

                    b.Property<double>("ProcChance")
                        .HasColumnType("REAL");

                    b.Property<string>("ProductCategory")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReleaseDate")
                        .HasColumnType("TEXT");

                    b.Property<double>("ReloadTime")
                        .HasColumnType("REAL");

                    b.Property<string>("SelfPolarities")
                        .HasColumnType("TEXT");

                    b.Property<double>("TotalDamage")
                        .HasColumnType("REAL");

                    b.Property<bool>("Tradable")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Trigger")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UniqueName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("WikiaThumbnail")
                        .HasColumnType("TEXT");

                    b.Property<string>("WikiaUrl")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ArchGun");
                });

            modelBuilder.Entity("Wfa.Models.Community.ArchGunAttack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ArchGunId")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("ChargeTime")
                        .HasColumnType("REAL");

                    b.Property<double?>("CritChance")
                        .HasColumnType("REAL");

                    b.Property<double?>("CritMult")
                        .HasColumnType("REAL");

                    b.Property<int?>("DamageId")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Flight")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ShotType")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Speed")
                        .HasColumnType("REAL");

                    b.Property<double?>("StatusChance")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("ArchGunId");

                    b.HasIndex("DamageId");

                    b.ToTable("ArchGunAttack");
                });

            modelBuilder.Entity("Wfa.Models.Community.ArchGunDamage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Blast")
                        .HasColumnType("REAL");

                    b.Property<double?>("Cold")
                        .HasColumnType("REAL");

                    b.Property<double?>("Corrosive")
                        .HasColumnType("REAL");

                    b.Property<double?>("Electricity")
                        .HasColumnType("REAL");

                    b.Property<double>("Gas")
                        .HasColumnType("REAL");

                    b.Property<double?>("Heat")
                        .HasColumnType("REAL");

                    b.Property<double?>("Impact")
                        .HasColumnType("REAL");

                    b.Property<double?>("Magnetic")
                        .HasColumnType("REAL");

                    b.Property<double?>("Puncture")
                        .HasColumnType("REAL");

                    b.Property<double?>("Radiation")
                        .HasColumnType("REAL");

                    b.Property<double?>("Slash")
                        .HasColumnType("REAL");

                    b.Property<double?>("Toxin")
                        .HasColumnType("REAL");

                    b.Property<double?>("Viral")
                        .HasColumnType("REAL");

                    b.Property<double?>("Void")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("ArchGunDamage");
                });

            modelBuilder.Entity("Wfa.Models.Community.ArchMelee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BlockingAngle")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ComboDuration")
                        .HasColumnType("INTEGER");

                    b.Property<double>("CriticalChance")
                        .HasColumnType("REAL");

                    b.Property<double>("CriticalMultiplier")
                        .HasColumnType("REAL");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("Disposition")
                        .HasColumnType("INTEGER");

                    b.Property<double>("FireRate")
                        .HasColumnType("REAL");

                    b.Property<double>("HeavyAttackDamage")
                        .HasColumnType("REAL");

                    b.Property<double>("HeavySlamAttack")
                        .HasColumnType("REAL");

                    b.Property<string>("ImageName")
                        .HasColumnType("TEXT");

                    b.Property<int>("MasteryReq")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("OmegaAttenuation")
                        .HasColumnType("REAL");

                    b.Property<double>("ProcChance")
                        .HasColumnType("REAL");

                    b.Property<string>("ProductCategory")
                        .HasColumnType("TEXT");

                    b.Property<double>("Range")
                        .HasColumnType("REAL");

                    b.Property<string>("SelfPolarities")
                        .HasColumnType("TEXT");

                    b.Property<double>("SlamAttack")
                        .HasColumnType("REAL");

                    b.Property<double>("SlamRadialDamage")
                        .HasColumnType("REAL");

                    b.Property<double>("SlamRadius")
                        .HasColumnType("REAL");

                    b.Property<double>("SlideAttack")
                        .HasColumnType("REAL");

                    b.Property<double?>("TotalDamage")
                        .HasColumnType("REAL");

                    b.Property<bool>("Tradable")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UniqueName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("WikiaThumbnail")
                        .HasColumnType("TEXT");

                    b.Property<string>("WikiaUrl")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ArchMelee");
                });

            modelBuilder.Entity("Wfa.Models.Community.ArchMeleeAttack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ArchMeleeId")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("CritChance")
                        .HasColumnType("REAL");

                    b.Property<double?>("CritMult")
                        .HasColumnType("REAL");

                    b.Property<int?>("DamageId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double?>("Speed")
                        .HasColumnType("REAL");

                    b.Property<double?>("StatusChance")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("ArchMeleeId");

                    b.HasIndex("DamageId");

                    b.ToTable("ArchMeleeAttack");
                });

            modelBuilder.Entity("Wfa.Models.Community.ArchMeleeDamage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Blast")
                        .HasColumnType("REAL");

                    b.Property<double?>("Cold")
                        .HasColumnType("REAL");

                    b.Property<double?>("Corrosive")
                        .HasColumnType("REAL");

                    b.Property<double?>("Electricity")
                        .HasColumnType("REAL");

                    b.Property<double>("Gas")
                        .HasColumnType("REAL");

                    b.Property<double?>("Heat")
                        .HasColumnType("REAL");

                    b.Property<double?>("Impact")
                        .HasColumnType("REAL");

                    b.Property<double?>("Magnetic")
                        .HasColumnType("REAL");

                    b.Property<double?>("Puncture")
                        .HasColumnType("REAL");

                    b.Property<double?>("Radiation")
                        .HasColumnType("REAL");

                    b.Property<double?>("Slash")
                        .HasColumnType("REAL");

                    b.Property<double?>("Toxin")
                        .HasColumnType("REAL");

                    b.Property<double?>("Viral")
                        .HasColumnType("REAL");

                    b.Property<double?>("Void")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("ArchMeleeDamage");
                });

            modelBuilder.Entity("Wfa.Models.Community.Archwing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Armor")
                        .HasColumnType("REAL");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Health")
                        .HasColumnType("REAL");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("MasteryReq")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Power")
                        .HasColumnType("REAL");

                    b.Property<string>("ProductCategory")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SelfPolarities")
                        .HasColumnType("TEXT");

                    b.Property<double>("Shield")
                        .HasColumnType("REAL");

                    b.Property<double>("SprintSpeed")
                        .HasColumnType("REAL");

                    b.Property<double?>("Stamina")
                        .HasColumnType("REAL");

                    b.Property<bool>("Tradable")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UniqueName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("VaultDate")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("Vaulted")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Archwing");
                });

            modelBuilder.Entity("Wfa.Models.Community.ArchwingAbility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ArchwingId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ArchwingId");

                    b.ToTable("ArchwingAbility");
                });

            modelBuilder.Entity("Wfa.Models.Community.Melee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BlockingAngle")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ComboDuration")
                        .HasColumnType("INTEGER");

                    b.Property<double>("CriticalChance")
                        .HasColumnType("REAL");

                    b.Property<double>("CriticalMultiplier")
                        .HasColumnType("REAL");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("Disposition")
                        .HasColumnType("INTEGER");

                    b.Property<double>("FireRate")
                        .HasColumnType("REAL");

                    b.Property<double>("HeavyAttackDamage")
                        .HasColumnType("REAL");

                    b.Property<double>("HeavySlamAttack")
                        .HasColumnType("REAL");

                    b.Property<double?>("HeavySlamRadialDamage")
                        .HasColumnType("REAL");

                    b.Property<double?>("HeavySlamRadius")
                        .HasColumnType("REAL");

                    b.Property<string>("ImageName")
                        .HasColumnType("TEXT");

                    b.Property<int>("MasteryReq")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MaxLevelCap")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("OmegaAttenuation")
                        .HasColumnType("REAL");

                    b.Property<double>("ProcChance")
                        .HasColumnType("REAL");

                    b.Property<string>("ProductCategory")
                        .HasColumnType("TEXT");

                    b.Property<double>("Range")
                        .HasColumnType("REAL");

                    b.Property<string>("ReleaseDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("SelfPolarities")
                        .HasColumnType("TEXT");

                    b.Property<double>("SlamAttack")
                        .HasColumnType("REAL");

                    b.Property<double>("SlamRadialDamage")
                        .HasColumnType("REAL");

                    b.Property<double>("SlamRadius")
                        .HasColumnType("REAL");

                    b.Property<double>("SlideAttack")
                        .HasColumnType("REAL");

                    b.Property<string>("StancePolarity")
                        .HasColumnType("TEXT");

                    b.Property<double?>("TotalDamage")
                        .HasColumnType("REAL");

                    b.Property<bool>("Tradable")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UniqueName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("WikiaThumbnail")
                        .HasColumnType("TEXT");

                    b.Property<string>("WikiaUrl")
                        .HasColumnType("TEXT");

                    b.Property<double?>("WindUp")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("Melee");
                });

            modelBuilder.Entity("Wfa.Models.Community.MeleeAttack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double?>("ChargeTime")
                        .HasColumnType("REAL");

                    b.Property<double?>("CritChance")
                        .HasColumnType("REAL");

                    b.Property<double?>("CritMult")
                        .HasColumnType("REAL");

                    b.Property<int?>("DamageId")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Flight")
                        .HasColumnType("REAL");

                    b.Property<int?>("MeleeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ShotType")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Speed")
                        .HasColumnType("REAL");

                    b.Property<double?>("StatusChance")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("DamageId");

                    b.HasIndex("MeleeId");

                    b.ToTable("MeleeAttack");
                });

            modelBuilder.Entity("Wfa.Models.Community.MeleeDamage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Blast")
                        .HasColumnType("REAL");

                    b.Property<double?>("Cold")
                        .HasColumnType("REAL");

                    b.Property<double?>("Corrosive")
                        .HasColumnType("REAL");

                    b.Property<double?>("Electricity")
                        .HasColumnType("REAL");

                    b.Property<double>("Gas")
                        .HasColumnType("REAL");

                    b.Property<double?>("Heat")
                        .HasColumnType("REAL");

                    b.Property<double?>("Impact")
                        .HasColumnType("REAL");

                    b.Property<double?>("Magnetic")
                        .HasColumnType("REAL");

                    b.Property<double?>("Puncture")
                        .HasColumnType("REAL");

                    b.Property<double?>("Radiation")
                        .HasColumnType("REAL");

                    b.Property<double?>("Slash")
                        .HasColumnType("REAL");

                    b.Property<double?>("Toxin")
                        .HasColumnType("REAL");

                    b.Property<double?>("Viral")
                        .HasColumnType("REAL");

                    b.Property<double?>("Void")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("MeleeDamage");
                });

            modelBuilder.Entity("Wfa.Models.Community.Mod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BaseDrain")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CompatName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("FusionLimit")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool?>("IsAugment")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsExilus")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsUtility")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModSet")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModSetEffects")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Polarity")
                        .HasColumnType("TEXT");

                    b.Property<string>("Rarity")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReleaseDate")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("Tradable")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Transmutable")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UniqueName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("WikiaThumbnail")
                        .HasColumnType("TEXT");

                    b.Property<string>("WikiaUrl")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Mods");
                });

            modelBuilder.Entity("Wfa.Models.Community.ModEffect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Level")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ModId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ModId");

                    b.ToTable("ModEffect");
                });

            modelBuilder.Entity("Wfa.Models.Community.Primary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Accuracy")
                        .HasColumnType("REAL");

                    b.Property<double?>("Ammo")
                        .HasColumnType("REAL");

                    b.Property<string>("Category")
                        .HasColumnType("TEXT");

                    b.Property<double>("CriticalChance")
                        .HasColumnType("REAL");

                    b.Property<double>("CriticalMultiplier")
                        .HasColumnType("REAL");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Disposition")
                        .HasColumnType("INTEGER");

                    b.Property<double>("FireRate")
                        .HasColumnType("REAL");

                    b.Property<string>("ImageName")
                        .HasColumnType("TEXT");

                    b.Property<int>("MagazineSize")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MasteryReq")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxLevelCap")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Multishot")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Noise")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("OmegaAttenuation")
                        .HasColumnType("REAL");

                    b.Property<double>("ProcChance")
                        .HasColumnType("REAL");

                    b.Property<string>("ProductCategory")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReleaseDate")
                        .HasColumnType("TEXT");

                    b.Property<double>("ReloadTime")
                        .HasColumnType("REAL");

                    b.Property<string>("SelfPolarities")
                        .HasColumnType("TEXT");

                    b.Property<double>("TotalDamage")
                        .HasColumnType("REAL");

                    b.Property<bool>("Tradable")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Trigger")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UniqueName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("WikiaThumbnail")
                        .HasColumnType("TEXT");

                    b.Property<string>("WikiaUrl")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Primaries");
                });

            modelBuilder.Entity("Wfa.Models.Community.PrimaryAttack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double?>("ChargeTime")
                        .HasColumnType("REAL");

                    b.Property<double?>("CritChance")
                        .HasColumnType("REAL");

                    b.Property<double?>("CritMult")
                        .HasColumnType("REAL");

                    b.Property<int?>("DamageId")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Flight")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("PrimaryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ShotType")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Speed")
                        .HasColumnType("REAL");

                    b.Property<double?>("StatusChance")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("DamageId");

                    b.HasIndex("PrimaryId");

                    b.ToTable("PrimaryAttack");
                });

            modelBuilder.Entity("Wfa.Models.Community.PrimaryDamage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Blast")
                        .HasColumnType("REAL");

                    b.Property<double?>("Cold")
                        .HasColumnType("REAL");

                    b.Property<double?>("Corrosive")
                        .HasColumnType("REAL");

                    b.Property<double?>("Electricity")
                        .HasColumnType("REAL");

                    b.Property<double>("Gas")
                        .HasColumnType("REAL");

                    b.Property<double?>("Heat")
                        .HasColumnType("REAL");

                    b.Property<double?>("Impact")
                        .HasColumnType("REAL");

                    b.Property<double?>("Magnetic")
                        .HasColumnType("REAL");

                    b.Property<double?>("Puncture")
                        .HasColumnType("REAL");

                    b.Property<double?>("Radiation")
                        .HasColumnType("REAL");

                    b.Property<double?>("Slash")
                        .HasColumnType("REAL");

                    b.Property<double?>("Toxin")
                        .HasColumnType("REAL");

                    b.Property<double?>("Viral")
                        .HasColumnType("REAL");

                    b.Property<double?>("Void")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("PrimaryDamage");
                });

            modelBuilder.Entity("Wfa.Models.Community.Secondary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Accuracy")
                        .HasColumnType("REAL");

                    b.Property<double?>("Ammo")
                        .HasColumnType("REAL");

                    b.Property<string>("Category")
                        .HasColumnType("TEXT");

                    b.Property<double>("CriticalChance")
                        .HasColumnType("REAL");

                    b.Property<double>("CriticalMultiplier")
                        .HasColumnType("REAL");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Disposition")
                        .HasColumnType("INTEGER");

                    b.Property<double>("FireRate")
                        .HasColumnType("REAL");

                    b.Property<string>("ImageName")
                        .HasColumnType("TEXT");

                    b.Property<int>("MagazineSize")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MasteryReq")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxLevelCap")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Multishot")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Noise")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("OmegaAttenuation")
                        .HasColumnType("REAL");

                    b.Property<double>("ProcChance")
                        .HasColumnType("REAL");

                    b.Property<string>("ProductCategory")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReleaseDate")
                        .HasColumnType("TEXT");

                    b.Property<double>("ReloadTime")
                        .HasColumnType("REAL");

                    b.Property<string>("SelfPolarities")
                        .HasColumnType("TEXT");

                    b.Property<double>("TotalDamage")
                        .HasColumnType("REAL");

                    b.Property<bool>("Tradable")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Trigger")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UniqueName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("WikiaThumbnail")
                        .HasColumnType("TEXT");

                    b.Property<string>("WikiaUrl")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Secondaries");
                });

            modelBuilder.Entity("Wfa.Models.Community.SecondaryAttack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double?>("ChargeTime")
                        .HasColumnType("REAL");

                    b.Property<double?>("CritChance")
                        .HasColumnType("REAL");

                    b.Property<double?>("CritMult")
                        .HasColumnType("REAL");

                    b.Property<int?>("DamageId")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Flight")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("SecondaryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ShotType")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Speed")
                        .HasColumnType("REAL");

                    b.Property<double?>("StatusChance")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("DamageId");

                    b.HasIndex("SecondaryId");

                    b.ToTable("SecondaryAttack");
                });

            modelBuilder.Entity("Wfa.Models.Community.SecondaryDamage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Blast")
                        .HasColumnType("REAL");

                    b.Property<double?>("Cold")
                        .HasColumnType("REAL");

                    b.Property<double?>("Corrosive")
                        .HasColumnType("REAL");

                    b.Property<double?>("Electricity")
                        .HasColumnType("REAL");

                    b.Property<double>("Gas")
                        .HasColumnType("REAL");

                    b.Property<double?>("Heat")
                        .HasColumnType("REAL");

                    b.Property<double?>("Impact")
                        .HasColumnType("REAL");

                    b.Property<double?>("Magnetic")
                        .HasColumnType("REAL");

                    b.Property<double?>("Puncture")
                        .HasColumnType("REAL");

                    b.Property<double?>("Radiation")
                        .HasColumnType("REAL");

                    b.Property<double?>("Slash")
                        .HasColumnType("REAL");

                    b.Property<double?>("Toxin")
                        .HasColumnType("REAL");

                    b.Property<double?>("Viral")
                        .HasColumnType("REAL");

                    b.Property<double?>("Void")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("SecondaryDamage");
                });

            modelBuilder.Entity("Wfa.Models.Community.Warframe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Armor")
                        .HasColumnType("REAL");

                    b.Property<string>("Aura")
                        .HasColumnType("TEXT");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Conclave")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Health")
                        .HasColumnType("REAL");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("MasteryReq")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PassiveDescription")
                        .HasColumnType("TEXT");

                    b.Property<double>("Power")
                        .HasColumnType("REAL");

                    b.Property<string>("ProductCategory")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SelfPolarities")
                        .HasColumnType("TEXT");

                    b.Property<string>("Sex")
                        .HasColumnType("TEXT");

                    b.Property<double>("Shield")
                        .HasColumnType("REAL");

                    b.Property<double>("SprintSpeed")
                        .HasColumnType("REAL");

                    b.Property<double?>("Stamina")
                        .HasColumnType("REAL");

                    b.Property<bool>("Tradable")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UniqueName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("VaultDate")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("Vaulted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("WikiaThumbnail")
                        .HasColumnType("TEXT");

                    b.Property<string>("WikiaUrl")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Warframes");
                });

            modelBuilder.Entity("Wfa.Models.Community.WarframeAbility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("WarframeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("WarframeId");

                    b.ToTable("WarframeAbility");
                });

            modelBuilder.Entity("Wfa.Models.Data.Center.Dict", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<string>("UniqueName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Dicts");
                });

            modelBuilder.Entity("Wfa.Models.Data.Center.MarketItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .HasColumnType("TEXT");

                    b.Property<string>("Main")
                        .HasColumnType("TEXT");

                    b.Property<string>("MarketId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Thumbnail")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MarketItems");
                });

            modelBuilder.Entity("Wfa.Models.Data.Center.Meta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Metas");
                });

            modelBuilder.Entity("Wfa.Models.Community.ArchGunAttack", b =>
                {
                    b.HasOne("Wfa.Models.Community.ArchGun", null)
                        .WithMany("Attacks")
                        .HasForeignKey("ArchGunId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Wfa.Models.Community.ArchGunDamage", "Damage")
                        .WithMany()
                        .HasForeignKey("DamageId");
                });

            modelBuilder.Entity("Wfa.Models.Community.ArchMeleeAttack", b =>
                {
                    b.HasOne("Wfa.Models.Community.ArchMelee", null)
                        .WithMany("Attacks")
                        .HasForeignKey("ArchMeleeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Wfa.Models.Community.ArchMeleeDamage", "Damage")
                        .WithMany()
                        .HasForeignKey("DamageId");
                });

            modelBuilder.Entity("Wfa.Models.Community.ArchwingAbility", b =>
                {
                    b.HasOne("Wfa.Models.Community.Archwing", null)
                        .WithMany("Abilities")
                        .HasForeignKey("ArchwingId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Wfa.Models.Community.MeleeAttack", b =>
                {
                    b.HasOne("Wfa.Models.Community.MeleeDamage", "Damage")
                        .WithMany()
                        .HasForeignKey("DamageId");

                    b.HasOne("Wfa.Models.Community.Melee", null)
                        .WithMany("Attacks")
                        .HasForeignKey("MeleeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Wfa.Models.Community.ModEffect", b =>
                {
                    b.HasOne("Wfa.Models.Community.Mod", null)
                        .WithMany("Effects")
                        .HasForeignKey("ModId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Wfa.Models.Community.PrimaryAttack", b =>
                {
                    b.HasOne("Wfa.Models.Community.PrimaryDamage", "Damage")
                        .WithMany()
                        .HasForeignKey("DamageId");

                    b.HasOne("Wfa.Models.Community.Primary", null)
                        .WithMany("Attacks")
                        .HasForeignKey("PrimaryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Wfa.Models.Community.SecondaryAttack", b =>
                {
                    b.HasOne("Wfa.Models.Community.SecondaryDamage", "Damage")
                        .WithMany()
                        .HasForeignKey("DamageId");

                    b.HasOne("Wfa.Models.Community.Secondary", null)
                        .WithMany("Attacks")
                        .HasForeignKey("SecondaryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Wfa.Models.Community.WarframeAbility", b =>
                {
                    b.HasOne("Wfa.Models.Community.Warframe", null)
                        .WithMany("Abilities")
                        .HasForeignKey("WarframeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
